// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Uncomment for SQLite testing:
  // provider = "sqlite"
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  habits              Habit[]
  sharedHabits        SharedHabit[]
  notifications       Notification[]
  pushSubscriptions   PushSubscription[]
  notificationPrefs   NotificationPreference?
  
  @@map("users")
}

model Habit {
  id              String    @id @default(cuid())
  name            String
  description     String?
  streak          Int       @default(0)
  longestStreak   Int       @default(0)
  lastCompletedAt DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  entries         HabitEntry[]
  sharedHabits    SharedHabit[]
  
  @@index([userId, isActive])
  @@map("habits")
}

model HabitEntry {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  completed   Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  
  habitId     String
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  @@unique([habitId, date])
  @@index([date])
  @@map("habit_entries")
}

model SharedHabit {
  id          String    @id @default(cuid())
  shareType   String    // progress, achievement, milestone
  message     String?
  isPublic    Boolean   @default(false)
  viewCount   Int       @default(0)
  shareUrl    String    @unique
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  
  habitId     String
  habit       Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([shareUrl])
  @@index([userId])
  @@map("shared_habits")
}

model Notification {
  id          String    @id @default(cuid())
  type        String    // habit_reminder, streak_milestone, etc
  title       String
  body        String
  data        Json?
  read        Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}

model PushSubscription {
  id          String    @id @default(cuid())
  platform    String    // web, ios, android
  token       String
  deviceId    String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, token])
  @@index([userId, active])
  @@map("push_subscriptions")
}

model NotificationPreference {
  id               String    @id @default(cuid())
  habitReminders   Boolean   @default(true)
  reminderTime     String    @default("09:00") // HH:MM format
  streakMilestones Boolean   @default(true)
  achievements     Boolean   @default(true)
  weeklySummary    Boolean   @default(true)
  pushEnabled      Boolean   @default(true)
  emailEnabled     Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}

model CronJob {
  id          String   @id @default(cuid())
  name        String   @unique
  lastRunAt   DateTime?
  status      String   @default("pending") // pending, running, completed, failed
  result      Json?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("cron_jobs")
}
