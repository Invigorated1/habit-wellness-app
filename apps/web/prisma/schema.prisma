// HabitStory Database Schema
// Personalized wellness through archetypes

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER & AUTH ====================

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  role      String   @default("user") // user, premium, admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  profile       Profile?
  assignments   Assignment[]
  goals         Goal[]
  taskInstances TaskInstance[]
  verifications VerificationSubmission[]
  billingPlan   BillingPlan?
  habits        Habit[]
  habitEntries  HabitEntry[]
  
  @@map("users")
}

model Profile {
  id               String           @id @default(cuid())
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  timezone         String           @default("UTC")
  dndWindows       Json?            // {"start": "22:00", "end": "06:00"}
  verificationMode VerificationMode @default(NONE)
  onboardingStep   String?          // Track progress
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  traitScores TraitScore[]
  
  @@map("profiles")
}

// ==================== ARCHETYPES ====================

model TraitScore {
  id         String   @id @default(cuid())
  profileId  String
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  trait      String   // BIG5_OPENNESS, BIG5_CONSCIENTIOUSNESS, etc.
  score      Float    // 0.0 to 1.0
  source     String   // questionnaire version/id
  confidence Float    @default(0.5) // confidence in score
  createdAt  DateTime @default(now())
  
  @@unique([profileId, trait])
  @@map("trait_scores")
}

model Assignment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  house      String   // MONK, WARRIOR_MONK, SAGE, ARTISAN, OPERATIVE, COUNCILOR
  class      String   // VIPASSANA_FIRST, BREATH_FIRST, etc.
  subclass   String?  // Future expansion
  confidence Float    // 0.0 to 1.0
  rationale  String?  // Why this assignment
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  expiresAt  DateTime? // For reassessment
  
  @@index([userId, active])
  @@map("assignments")
}

model Goal {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  label     String   // calm, focus, strength, flexibility, etc.
  priority  Int      @default(1) // 1-5
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@index([userId, active])
  @@map("goals")
}

// ==================== HABITS (Legacy compatibility) ====================

model Habit {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  frequency      String   @default("daily") // daily, weekly, custom
  targetDays     Int[]    @default([]) // 0=Sun, 1=Mon, etc.
  reminderTime   String?  // HH:MM format
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  entries        HabitEntry[]
  
  @@index([userId, isActive])
  @@map("habits")
}

model HabitEntry {
  id          String   @id @default(cuid())
  habitId     String
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completed   Boolean  @default(false)
  completedAt DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  
  @@unique([habitId, userId, createdAt])
  @@index([userId, createdAt])
  @@map("habit_entries")
}

// ==================== TASKS & SCHEDULING ====================

model TaskTemplate {
  id              String   @id @default(cuid())
  key             String   @unique // vipassana_scan_30min
  title           String
  description     String   @db.Text
  instructions    String   @db.Text
  modality        String   // MEDITATION, BREATH, MOBILITY, STRENGTH, VISUALIZATION, JOURNAL
  minDuration     Int      // seconds
  maxDuration     Int      // seconds
  difficulty      Int      @default(1) // 1-5
  houseTags       String[] // Which houses this is for
  personalization Json?    // Parameter schema for customization
  captureType     String   @default("NONE") // NONE, VIDEO, AUDIO, POSE
  isCore          Boolean  @default(false) // Core practices for all
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  instances TaskInstance[]
  
  @@map("task_templates")
}

model TaskInstance {
  id                  String      @id @default(cuid())
  userId              String
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId          String
  template            TaskTemplate @relation(fields: [templateId], references: [id])
  scheduledAt         DateTime
  scheduledEndAt      DateTime?   // For time windows
  durationSec         Int
  params              Json?        // Personalized parameters
  status              TaskStatus  @default(SCHEDULED)
  startedAt           DateTime?
  completedAt         DateTime?
  skippedAt           DateTime?
  skippedReason       String?
  notificationsSent   Int         @default(0)
  lastNotificationAt  DateTime?
  
  // Relations
  verification VerificationSubmission?
  
  @@index([userId, scheduledAt])
  @@index([status, scheduledAt])
  @@map("task_instances")
}

// ==================== VERIFICATION ====================

model VerificationSubmission {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskInstanceId    String           @unique
  taskInstance      TaskInstance     @relation(fields: [taskInstanceId], references: [id], onDelete: Cascade)
  mode              VerificationMode
  mediaUrl          String?          // S3/R2 URL if stored
  mediaThumbnail    String?          // For preview
  metrics           Json?            // {poseCount: 20, breathRate: 6}
  hashChain         String?          // Integrity verification
  deviceInfo        Json?            // For fraud detection
  
  // Review process
  reviewStatus      ReviewStatus     @default(PENDING)
  reviewedById      String?
  reviewedAt        DateTime?
  reviewNotes       String?
  fraudScore        Float?           // 0.0 to 1.0
  
  createdAt         DateTime         @default(now())
  expiresAt         DateTime?        // For media cleanup
  
  @@index([reviewStatus, createdAt])
  @@map("verification_submissions")
}

// ==================== BILLING & SUBSCRIPTIONS ====================

model BillingPlan {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier            String   // FREE, PRO, PRO_PLUS
  addons          String[] // ACCOUNTABILITY, MENTOR_ACCESS
  stripeCustomerId String?
  stripeSubscriptionId String?
  status          String   @default("active") // active, cancelled, past_due
  currentPeriodEnd DateTime?
  cancelAtPeriodEnd Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("billing_plans")
}

// ==================== ENUMS ====================

enum VerificationMode {
  NONE
  ANONYMIZED
  PEER_STAFF
}

enum TaskStatus {
  SCHEDULED
  NOTIFIED
  STARTED
  COMPLETED
  SKIPPED
  EXPIRED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
  EXPIRED
}

// ==================== COMMUNITY (Future) ====================

// model HouseFeed {
//   id        String   @id @default(cuid())
//   house     String
//   content   String
//   author    User     @relation(...)
//   createdAt DateTime @default(now())
// }

// model Challenge {
//   id          String   @id @default(cuid())
//   house       String
//   title       String
//   description String
//   startDate   DateTime
//   endDate     DateTime
//   participants User[]
// }